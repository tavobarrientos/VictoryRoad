name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (major, minor, patch)'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Calculate Version
        id: version
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Remove 'v' prefix for processing
          LAST_VERSION="${LAST_TAG#v}"
          
          # Parse semantic version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          # Determine version bump based on context
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tagged release - use the tag
            VERSION="${{ github.ref_name }}"
            VERSION_TAG="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger - bump based on input
            case "${{ github.event.inputs.version_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
            VERSION_TAG="v${VERSION}"
          else
            # Auto increment for main branch pushes
            # Check commit messages for version hints
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" 2>/dev/null || git log --pretty=format:"%s")
            
            if echo "$COMMITS" | grep -qiE "breaking|major"; then
              # Breaking change - major version bump
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              VERSION="${MAJOR}.${MINOR}.${PATCH}"
            elif echo "$COMMITS" | grep -qiE "feat|feature|add"; then
              # New feature - minor version bump
              MINOR=$((MINOR + 1))
              PATCH=0
              VERSION="${MAJOR}.${MINOR}.${PATCH}"
            else
              # Bug fixes and other changes - patch version bump
              PATCH=$((PATCH + 1))
              VERSION="${MAJOR}.${MINOR}.${PATCH}"
            fi
            
            # Add build metadata for non-release builds
            BUILD_NUM="${{ github.run_number }}"
            COMMIT_SHA=$(git rev-parse --short HEAD)
            VERSION="${VERSION}-dev.${BUILD_NUM}+${COMMIT_SHA}"
            VERSION_TAG="v${VERSION}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "Calculated version: ${VERSION}"
          echo "Version tag: ${VERSION_TAG}"
  
  build-windows:
    name: Build Windows
    needs: determine-version
    runs-on: windows-latest
    strategy:
      matrix:
        runtime: [win-x64, win-x86, win-arm64]
        include:
          - runtime: win-x64
            arch: x64
          - runtime: win-x86
            arch: x86
          - runtime: win-arm64
            arch: arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build and Publish
        run: |
          dotnet publish VictoryRoad.UI/VictoryRoad.UI.csproj `
            -c Release `
            -r ${{ matrix.runtime }} `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -o publish/${{ matrix.arch }}
      
      - name: Create Archive
        run: |
          Compress-Archive -Path publish/${{ matrix.arch }}/* -DestinationPath VictoryRoad-Windows-${{ matrix.arch }}.zip
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: VictoryRoad-Windows-${{ matrix.arch }}
          path: VictoryRoad-Windows-${{ matrix.arch }}.zip

  build-linux:
    name: Build Linux
    needs: determine-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [linux-x64, linux-arm64]
        include:
          - runtime: linux-x64
            arch: x64
          - runtime: linux-arm64
            arch: arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build and Publish
        run: |
          dotnet publish VictoryRoad.UI/VictoryRoad.UI.csproj \
            -c Release \
            -r ${{ matrix.runtime }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -o publish/${{ matrix.arch }}
      
      - name: Set executable permissions
        run: chmod +x publish/${{ matrix.arch }}/VictoryRoad.UI
      
      - name: Prepare package structure
        run: |
          # Create directory structure for packages
          mkdir -p package/usr/bin
          mkdir -p package/usr/share/applications
          mkdir -p package/usr/share/doc/victoryroad
          
          # Copy files
          cp publish/${{ matrix.arch }}/VictoryRoad.UI package/usr/bin/victoryroad
          cp publish/${{ matrix.arch }}/*.pdf package/usr/bin/
          
          # Create desktop file
          cat > package/usr/share/applications/victoryroad.desktop << EOF
          [Desktop Entry]
          Name=Victory Road
          Comment=Pokemon TCG Deck List Generator
          Exec=/usr/bin/victoryroad
          Icon=victoryroad
          Type=Application
          Categories=Game;CardGame;Utility;
          EOF
          
          # Create basic documentation
          echo "Victory Road - Pokemon TCG Deck List Generator" > package/usr/share/doc/victoryroad/README
          echo "Version: ${{ needs.determine-version.outputs.version }}" >> package/usr/share/doc/victoryroad/README
      
      - name: Create DEB package
        run: |
          # Use the determined version
          VERSION="${{ needs.determine-version.outputs.version }}"
          # Remove 'v' prefix and build metadata for package version
          VERSION="${VERSION#v}"
          VERSION="${VERSION%%[-+]*}"  # Remove pre-release and build metadata
          
          # Create debian control structure
          mkdir -p package/DEBIAN
          cat > package/DEBIAN/control << EOF
          Package: victoryroad
          Version: ${VERSION}
          Section: games
          Priority: optional
          Architecture: ${{ matrix.arch == 'x64' && 'amd64' || 'arm64' }}
          Maintainer: Victory Road Team <support@victoryroad.app>
          Description: Pokemon TCG Deck List Generator
           Victory Road is a desktop application for creating and managing
           Pokemon Trading Card Game deck lists for official tournaments.
          Depends: libicu-dev
          EOF
          
          # Build DEB package
          dpkg-deb --build package victoryroad_${VERSION}_${{ matrix.arch }}.deb
      
      - name: Create TAR.GZ archive
        run: |
          # Use the determined version
          VERSION="${{ needs.determine-version.outputs.version }}"
          VERSION="${VERSION#v}"
          tar czf victoryroad-${VERSION}-${{ matrix.runtime }}.tar.gz -C publish/${{ matrix.arch }} .
      
      - name: Upload DEB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: victoryroad-deb-${{ matrix.arch }}
          path: "*.deb"
      
      - name: Upload TAR.GZ Artifact
        uses: actions/upload-artifact@v4
        with:
          name: victoryroad-tar-${{ matrix.runtime }}
          path: "*.tar.gz"

  create-release:
    name: Create Release
    needs: [determine-version, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    permissions:
      contents: write
      packages: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_VERSION="${{ needs.determine-version.outputs.version }}"
          CURRENT_TAG="${{ needs.determine-version.outputs.version_tag }}"
          
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "### Initial Release ðŸŽ‰" >> CHANGELOG.md
            git log --pretty=format:"- %s (%an)" >> CHANGELOG.md
          else
            # Get commit messages between tags
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%an)" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Downloads" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Windows" >> CHANGELOG.md
          echo "- **x64 (Intel/AMD)**: VictoryRoad-Windows-x64.zip" >> CHANGELOG.md
          echo "- **x86 (32-bit)**: VictoryRoad-Windows-x86.zip" >> CHANGELOG.md
          echo "- **ARM64**: VictoryRoad-Windows-arm64.zip" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Linux" >> CHANGELOG.md
          echo "#### DEB Packages (Debian/Ubuntu)" >> CHANGELOG.md
          echo "- **x64**: victoryroad_*_x64.deb" >> CHANGELOG.md
          echo "- **ARM64**: victoryroad_*_arm64.deb" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "#### Generic Linux (tar.gz)" >> CHANGELOG.md
          echo "- **x64**: victoryroad-*-linux-x64.tar.gz" >> CHANGELOG.md
          echo "- **ARM64**: victoryroad-*-linux-arm64.tar.gz" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Debian/Ubuntu" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo 'sudo dpkg -i victoryroad_*.deb' >> CHANGELOG.md
          echo '# If dependencies are missing:' >> CHANGELOG.md
          echo 'sudo apt-get install -f' >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Other Linux Distributions" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo '# Extract the tar.gz and run:' >> CHANGELOG.md
          echo 'tar xzf victoryroad-*-linux-x64.tar.gz' >> CHANGELOG.md
          echo './VictoryRoad.UI' >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          
          # Set changelog as output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine-version.outputs.version_tag }}
          name: Victory Road ${{ needs.determine-version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.determine-version.outputs.version, '-') }}
          files: |
            artifacts/**/*.zip
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}